"use strict";
(self["webpackChunkframeworkbundle"] = self["webpackChunkframeworkbundle"] || []).push([["src_Resources_public_js_tiles_fields_TileOSMOpeningHoursField_jsx"],{

/***/ "./src/Resources/public/js/tiles/fields/TileOSMOpeningHoursField.jsx":
/*!***************************************************************************!*\
  !*** ./src/Resources/public/js/tiles/fields/TileOSMOpeningHoursField.jsx ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");
var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _classCallCheck2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js"));
var _createClass2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js"));
var _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js"));
var _getPrototypeOf2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/getPrototypeOf.js"));
var _inherits2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/@babel/runtime/helpers/inherits.js"));
var _react = _interopRequireWildcard(__webpack_require__(/*! react */ "./node_modules/react/index.js"));
var _opening_hours = _interopRequireDefault(__webpack_require__(/*! opening_hours */ "./node_modules/opening_hours/build/opening_hours.js"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2["default"])(o), (0, _possibleConstructorReturn2["default"])(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2["default"])(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); } /*
 * This file is part of con4gis, the gis-kit for Contao CMS.
 * @package con4gis
 * @version 10
 * @author con4gis contributors (see "authors.txt")
 * @license LGPL-3.0-or-later
 * @copyright (c) 2010-2021, by KÃ¼stenschmiede GmbH Software & Design
 * @link https://www.con4gis.org
 */
var OSMOpeningHoursTileField = exports["default"] = /*#__PURE__*/function (_Component) {
  function OSMOpeningHoursTileField(props) {
    var _this;
    (0, _classCallCheck2["default"])(this, OSMOpeningHoursTileField);
    _this = _callSuper(this, OSMOpeningHoursTileField, [props]);
    _this.alwaysOpenStrings = ["24/7", "Mo-Su 00:00-00:00", "Mo - Su 00:00-00:00", "Mo-Su 00:00 - 00:00", "Mo - Su 00:00 - 00:00"];
    return _this;
  }
  (0, _inherits2["default"])(OSMOpeningHoursTileField, _Component);
  return (0, _createClass2["default"])(OSMOpeningHoursTileField, [{
    key: "render",
    value: function render() {
      var osmString = this.props.data[this.props.field.name];
      var osmStringReadable = '';
      var osmOh = null;
      var output = null;
      var daysNode = null;
      var hint = null;
      var hintNode = null;
      var osmNode = null;
      var openingHours = null;
      var days = [];
      if (osmString) {
        try {
          osmString = osmString.replace("\\", "");
          var doubleQuoteIdx = osmString.indexOf("\"");
          if (doubleQuoteIdx !== -1) {
            hint = osmString.substring(doubleQuoteIdx + 1, osmString.indexOf("\"", doubleQuoteIdx + 1));
            osmString = osmString.replace(hint, "");
            while (osmString.indexOf("\"") !== -1) {
              osmString = osmString.replace("\"", "");
            }
          }
          osmOh = new _opening_hours["default"](osmString, {
            address: {
              country_code: "de"
            }
          });
        } catch (e) {
          daysNode = osmString;
        }
        if (osmOh) {
          osmStringReadable = ""; //this.getReadableState("", "", osmOh, osmString);
          var outputArr = this.getOpeningIntervalsForThisWeek(osmOh, osmString);
          if (outputArr.length === 0) {
            daysNode = null;
          } else {
            var today = new Date();
            var day = today.getDay();
            var first = 0;
            var weekdays = this.props.languageRefs.WEEKDAYS;
            var sortedDays = [];
            first = day;
            for (var i = day; i < 7; i++) {
              sortedDays.push(i);
            }
            for (var _i = 0; _i < day; _i++) {
              sortedDays.push(_i);
            }
            for (var _i2 = 0; _i2 < sortedDays.length; _i2++) {
              var cnt = 0;
              var intervals = [];
              for (var j = 0; j < outputArr.length; j++) {
                if (outputArr[j][0] === sortedDays[_i2]) {
                  var _day = /*#__PURE__*/_react["default"].createElement("div", {
                    key: (j + 2) * 100,
                    className: "opening-hours-day-interval"
                  }, outputArr[j][1]);
                  intervals.push(_day);
                  cnt++;
                }
              }
              if (cnt === 0) {
                // let day = <div key={(i + 1) + 300} className={"opening-hours-day-interval"}>Geschlossen</div>;
                // intervals.push(day);
                continue;
              }
              var dayoutput = [/*#__PURE__*/_react["default"].createElement("div", {
                key: _i2 + 1,
                className: "opening-hours-day"
              }, weekdays[sortedDays[_i2]])];
              days.push(/*#__PURE__*/_react["default"].createElement("div", {
                className: "opening-hours-day-entry",
                key: (_i2 + 3) * 1000
              }, dayoutput, /*#__PURE__*/_react["default"].createElement("div", {
                className: "opening-hours-day-interval-wrapper"
              }, intervals)));
            }
            daysNode = /*#__PURE__*/_react["default"].createElement("div", {
              key: 1,
              className: "opening-hours-days"
            }, days);
          }
        }
      }
      if (osmStringReadable !== null && osmStringReadable !== '') {
        osmNode = /*#__PURE__*/_react["default"].createElement("div", {
          key: 2,
          className: "opening-hours-opened-state"
        }, osmStringReadable);
      }
      if (hint !== null) {
        hintNode = /*#__PURE__*/_react["default"].createElement("div", {
          key: 3,
          className: "opening-hours-opened-hint"
        }, hint);
        if (osmStringReadable.indexOf(hint) !== -1) {
          // hint is substring of osmStringReadable
          // so do not show it
          hintNode = null;
        }
      }

      // check for "string only"
      if (daysNode === "") {
        daysNode = null;
      }

      // check for 24/7 opening
      if (this.alwaysOpenStrings.includes(osmString)) {
        daysNode = this.props.languageRefs.ALWAYS_OPEN;
        osmStringReadable = "";
      }
      if (osmNode || hintNode) {
        openingHours = /*#__PURE__*/_react["default"].createElement("div", {
          className: "opening-hours-opened"
        }, osmNode, hintNode);
      }
      if (daysNode !== null || openingHours !== null) {
        return /*#__PURE__*/_react["default"].createElement("div", {
          className: this.props.field["class"] + " opening-hours"
        }, daysNode, openingHours);
      } else {
        return '';
      }
    }

    //ToDo translation
  }, {
    key: "getReadableState",
    value: function getReadableState(startString, endString, oh, osmString) {
      var output = '';
      if (oh.getUnknown()) {
        var _comment = oh.getComment();
        if (_comment) {
          if (_comment === this.props.languageRefs.OPEN_END_CLOSE_GUESSED) {
            if (osmString && osmString[osmString.length - 1] === '+') {
              _comment = this.props.languageRefs.OPEN_END;
            } else {
              _comment = this.props.languageRefs.OPEN_END_CLOSE_GUESSED;
            }
          }
        }
        output += this.props.languageRefs.MAYBE_OPEN + (_comment ? this.props.languageRefs.DEPENDING_UPON + _comment + '"' : '');
      } else {
        output += ' ' + (oh.getState() ? this.props.languageRefs.CURRENTLY_OPEN : this.props.languageRefs.CURRENTLY_CLOSED) + (comment ? ', comment "' + comment + '"' : '');
      }
      var state = oh.getState(); // we use current date
      var unknown = oh.getUnknown();
      var comment = oh.getComment();
      var nextchange = oh.getNextChange();
      if (!state) {
        if (typeof nextchange !== 'undefined' && nextchange.getHours().toString() !== '0') {
          var nextday = nextchange.getDate();
          var nextmonth = nextchange.getMonth() + 1;
          var nexthour = nextchange.getHours().toString().padStart(2, '0');
          var nextminute = nextchange.getMinutes().toString().padStart(2, '0');
          var today = new Date();
          if (today.getDate() === nextchange.getDate() && today.getMonth() === nextchange.getMonth() && today.getFullYear() === nextchange.getFullYear()) {
            output += this.props.languageRefs.WE_ARE_AT + nexthour + ':' + nextminute + this.props.languageRefs.AVAILABLE_FOR_YOU;
          } else if (today.getDate() + 1 === nextchange.getDate() && today.getMonth() === nextchange.getMonth() && today.getFullYear() === nextchange.getFullYear()) {
            output += this.props.languageRefs.WE_ARE_TOMORROW_AT + nexthour + ':' + nextminute + this.props.languageRefs.AVAILABLE_FOR_YOU;
          } else {
            output += this.props.languageRefs.WE_ARE_ON + nextday + '.' + nextmonth + '. ' + this.props.languageRefs.AT + ' ' + nexthour + ':' + nextminute + this.props.languageRefs.AVAILABLE_FOR_YOU;
          }
        }
      }
      return startString + output + endString + '.';
    }
  }, {
    key: "getOpeningIntervalsForThisWeek",
    value: function getOpeningIntervalsForThisWeek(oh, osmString) {
      var firstDay = new Date();
      firstDay.setHours(0);
      firstDay.setMinutes(0);
      var first = firstDay.getDate();
      var lastDay = new Date();
      lastDay.setHours(24);
      lastDay.setMinutes(0);
      var last = lastDay.getDate() + 6;
      var firstday = new Date(firstDay.setDate(first));
      var lastday = new Date(lastDay.setDate(last));
      var intervals = oh.getOpenIntervals(firstday, lastday);
      // if (intervals && intervals.length === 1) {
      //   // case where only a string is set
      //   return [];
      // }
      if (intervals) {
        var intervalLength = intervals.length;
        var outputArr = [];
        for (var i = 0; i < intervalLength; i++) {
          var from = intervals[i][0];
          var to = intervals[i][1];
          var opening = intervals[i][2] == 'unknown' ? '' : intervals[i][2];
          var comment = intervals[i][3] == 'false' ? '' : intervals[i][3];
          var fromDate = new Date(from);
          var fromHour = fromDate.getHours().toString().padStart(2, '0');
          var fromMinute = fromDate.getMinutes().toString().padStart(2, '0');
          var fromStr = fromHour + ':' + fromMinute + ' Uhr - ';
          var toDate = new Date(to);
          var toHour = toDate.getHours().toString().padStart(2, '0');
          var toMinute = toDate.getMinutes().toString().padStart(2, '0');
          var toStr = toHour + ':' + toMinute + ' Uhr';
          if (osmString && osmString[osmString.length - 1] == '+') {
            toStr = this.props.languageRefs.OPEN_END;
          }
          outputArr[i] = new Array(fromDate.getDay(), fromStr + toStr);
        }
        return outputArr;
      }
    }
  }]);
}(_react.Component);

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,